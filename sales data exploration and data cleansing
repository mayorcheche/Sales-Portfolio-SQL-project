Select *
From SALESPROJECT..SalesSheet

---I NEED TO DO CONVERT THE DATE TO THE STANDARDIZED DATE FORMAT

ALTER TABLE SalesSheet
Add OrderDateUpdate Date;

Update SalesSheet
SET ORDERDATE = CONVERT(Date,ORDERDATE)

ALTER TABLE SALESPROJECT..SalesSheet
DROP COLUMN OrderDateUpdate


----Update the PHONE column to remove specified characters
UPDATE SALESPROJECT..SalesSheet
SET PHONE = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(PHONE, ',', ''), '.', ''), '(', ''), ')', ''), '-', ''), '+', ''), ' ', '')
WHERE PHONE IS NOT NULL;


---Verify the update
SELECT *
FROM SALESPROJECT..SalesSheet;


----Calculating Profit Margin
SELECT (SALES) - (PRICEEACH) / (SALES) AS profit_margin
FROM SALESPROJECT..SalesSheet;


----UPDATE PROFITMARGIN INTO THE SALES TABLE#
ALTER TABLE SALESPROJECT..SalesSheet
Add profit_margin FLOAT;

UPDATE SALESPROJECT..SalesSheet
SET profit_margin = (SALES - PRICEEACH) / SALES
WHERE SALES IS NOT NULL AND PRICEEACH IS NOT NULL AND SALES <> 0;

----Verify the update
SELECT *
FROM SALESPROJECT..SalesSheet;

----Calculate the average revenue generated by a customer over their entire relationship with the business.
SELECT CUSTOMERNAME, SUM(SALES) AS total_sale_per_customer
FROM SALESPROJECT..SalesSheet
GROUP BY CUSTOMERNAME;


----I WANT TO MAKE THE ABOVE CODE A TABLE OF ITS OWN SO MI CAN USE LATER
CREATE TABLE SALESPROJECT..CustomerTotalSales (
    CUSTOMERNAME NVARCHAR(255),
    total_sale_per_customer DECIMAL(18, 2)
);

----Insert data into the CustomerTotalSales table
INSERT INTO SALESPROJECT..CustomerTotalSales (CUSTOMERNAME, total_sale_per_customer)
SELECT CUSTOMERNAME, SUM(SALES) AS total_sale_per_customer
FROM SALESPROJECT..SalesSheet
GROUP BY CUSTOMERNAME;

----Verify the new table
SELECT *
FROM SALESPROJECT..CustomerTotalSales
ORDER BY 6;

----Calculate the percentage of customers who stopped using your product or service within a given time period (Churn Rate)
SELECT CUSTOMERNAME, COUNT(DISTINCT CUSTOMERNAME) AS churned_customers
FROM SALESPROJECT..SalesSheet
WHERE ORDERDATE < '2005-05-31' AND CUSTOMERNAME NOT IN (SELECT CUSTOMERNAME FROM SALESPROJECT..SalesSheet WHERE ORDERDATE >= '2005-05-31')
GROUP BY CUSTOMERNAME;


----Evaluate customer behavior based on recency of purchase, frequency of purchase, and monetary value of purchases----RFM Analysis (Recency, Frequency, Monetary)
SELECT CUSTOMERNAME,
       MAX(ORDERDATE) AS last_purchase_date,
       COUNT(*) AS purchase_frequency,
       SUM(SALES) AS total_monetary
FROM SALESPROJECT..SalesSheet
GROUP BY CUSTOMERNAME;


----UPDATE THE RFM INTO THE CUSTOMER TOTAL SALES TABLE
ALTER TABLE SALESPROJECT..CustomerTotalSales
Add last_purchase_date DATE;

ALTER TABLE SALESPROJECT..CustomerTotalSales
Add purchase_frequency FLOAT;

ALTER TABLE SALESPROJECT..CustomerTotalSales
Add total_monetary FLOAT;


UPDATE SALESPROJECT..CustomerTotalSales
SET last_purchase_date = subquery.last_purchase_date,
    purchase_frequency = subquery.purchase_frequency,
    total_monetary = subquery.total_monetary
FROM (
    SELECT CUSTOMERNAME,
           MAX(ORDERDATE) AS last_purchase_date,
           COUNT(*) AS purchase_frequency,
           SUM(SALES) AS total_monetary
    FROM SALESPROJECT..SalesSheet
    GROUP BY CUSTOMERNAME
) AS subquery
WHERE SALESPROJECT..CustomerTotalSales.CUSTOMERNAME = subquery.CUSTOMERNAME;


----Identify the top customers contributing to 80% of your sales(Pareto Analysis (80/20 Rule)
WITH ranked_customers AS (
   SELECT CUSTOMERNAME,
          RANK() OVER (ORDER BY SUM(SALES) DESC) AS sales_rank
   FROM SALESPROJECT..SalesSheet
   GROUP BY CUSTOMERNAME
)
SELECT CUSTOMERNAME, sales_rank
FROM ranked_customers
WHERE sales_rank <= (0.8 * (SELECT COUNT(DISTINCT CUSTOMERNAME) FROM SALESPROJECT..SalesSheet))
GROUP BY CUSTOMERNAME, sales_rank;


----UPDATE SALES RANK INTO THE CUSTOMER TOTAL SALES TABLE
ALTER TABLE SALESPROJECT..CustomerTotalSales
Add sales_rank FLOAT;

WITH ranked_customers AS (
   SELECT CUSTOMERNAME,
          RANK() OVER (ORDER BY SUM(SALES) DESC) AS sales_rank
   FROM SALESPROJECT..SalesSheet
   GROUP BY CUSTOMERNAME
)
UPDATE SALESPROJECT..CustomerTotalSales
SET sales_rank = ranked_customers.sales_rank
FROM ranked_customers
WHERE SALESPROJECT..CustomerTotalSales.CUSTOMERNAME = ranked_customers.CUSTOMERNAME
 AND ranked_customers.sales_rank <= (0.8 * (SELECT COUNT(DISTINCT CUSTOMERNAME) FROM SALESPROJECT..SalesSheet));



---Smooth out fluctuations in sales data by calculating a moving average (moving averages)
 SELECT ORDERDATE, SALES,
       AVG(SALES) OVER (ORDER BY ORDERDATE ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) AS moving_average
FROM SALESPROJECT..SalesSheet;

----UPDATE MOVING AVERAGE INTO THE CUSTOMER TOTAL SALES TABLE
ALTER TABLE SALESPROJECT..CustomerTotalSales
Add moving_average FLOAT;


WITH SalesWithMovingAverage AS (
    SELECT CUSTOMERNAME, ORDERDATE, SALES,
           AVG(SALES) OVER (PARTITION BY CUSTOMERNAME ORDER BY ORDERDATE ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) AS moving_average
    FROM SALESPROJECT..SalesSheet
)
UPDATE SALESPROJECT..CustomerTotalSales
SET moving_average = SalesWithMovingAverage.moving_average
FROM SalesWithMovingAverage
WHERE SALESPROJECT..CustomerTotalSales.CUSTOMERNAME = SalesWithMovingAverage.CUSTOMERNAME;

